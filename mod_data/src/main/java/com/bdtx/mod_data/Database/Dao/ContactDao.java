package com.bdtx.mod_data.Database.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bdtx.mod_data.Database.Entity.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, String> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Number = new Property(0, String.class, "number", true, "NUMBER");
        public final static Property Remark = new Property(1, String.class, "remark", false, "REMARK");
        public final static Property LastContent = new Property(2, String.class, "lastContent", false, "LAST_CONTENT");
        public final static Property UpdateTime = new Property(3, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property UnreadCount = new Property(4, int.class, "unreadCount", false, "UNREAD_COUNT");
        public final static Property Draft = new Property(5, String.class, "draft", false, "DRAFT");
        public final static Property Longitude = new Property(6, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(7, double.class, "latitude", false, "LATITUDE");
        public final static Property Altitude = new Property(8, double.class, "altitude", false, "ALTITUDE");
    }


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"NUMBER\" TEXT PRIMARY KEY NOT NULL ," + // 0: number
                "\"REMARK\" TEXT," + // 1: remark
                "\"LAST_CONTENT\" TEXT," + // 2: lastContent
                "\"UPDATE_TIME\" INTEGER," + // 3: updateTime
                "\"UNREAD_COUNT\" INTEGER NOT NULL ," + // 4: unreadCount
                "\"DRAFT\" TEXT," + // 5: draft
                "\"LONGITUDE\" REAL NOT NULL ," + // 6: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 7: latitude
                "\"ALTITUDE\" REAL NOT NULL );"); // 8: altitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(1, number);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(2, remark);
        }
 
        String lastContent = entity.getLastContent();
        if (lastContent != null) {
            stmt.bindString(3, lastContent);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(4, updateTime);
        }
        stmt.bindLong(5, entity.getUnreadCount());
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(6, draft);
        }
        stmt.bindDouble(7, entity.getLongitude());
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getAltitude());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(1, number);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(2, remark);
        }
 
        String lastContent = entity.getLastContent();
        if (lastContent != null) {
            stmt.bindString(3, lastContent);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(4, updateTime);
        }
        stmt.bindLong(5, entity.getUnreadCount());
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(6, draft);
        }
        stmt.bindDouble(7, entity.getLongitude());
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getAltitude());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // number
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // remark
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastContent
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // updateTime
            cursor.getInt(offset + 4), // unreadCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // draft
            cursor.getDouble(offset + 6), // longitude
            cursor.getDouble(offset + 7), // latitude
            cursor.getDouble(offset + 8) // altitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setNumber(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRemark(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUnreadCount(cursor.getInt(offset + 4));
        entity.setDraft(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitude(cursor.getDouble(offset + 6));
        entity.setLatitude(cursor.getDouble(offset + 7));
        entity.setAltitude(cursor.getDouble(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Contact entity, long rowId) {
        return entity.getNumber();
    }
    
    @Override
    public String getKey(Contact entity) {
        if(entity != null) {
            return entity.getNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contact entity) {
        return entity.getNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
